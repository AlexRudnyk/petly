{"version":3,"file":"static/js/91.75cbbd92.chunk.js","mappings":"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","sources":["helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","webpack://react-homework-template/./src/pages/RegisterPage/PhoneInput.css?0cb8","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport i18n from 'i18n';\n\nexport const registerValidationSchemaOne = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      // /^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1})))@([-A-Za-z]{1,}.){1,2}[-A-Za-z]{2,})$/,\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      i18n.t('email_match')\n    )\n    .min(5, i18n.t('at_least_five'))\n    .required(i18n.t('required_field')),\n  password: Yup.string()\n    .matches(/^\\S+$/, i18n.t('no_space'))\n    .min(7, i18n.t('at_least_seven'))\n    .max(32, i18n.t('max_tt'))\n    .required(i18n.t('required_field')),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], i18n.t('Passwords_match'))\n    .required(i18n.t('required_field')),\n});\n\nexport const registerValidationSchemaTwo = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      i18n.t('Only_cyrillic_latin')\n    )\n    .required(i18n.t('required_field')),\n\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should_City'\n    )\n    .required(i18n.t('required_field')),\n  // phone: Yup.string()\n\n  //   .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n  //   .min(13)\n  //   .max(13)\n  //   .required('Required field'),\n});\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const { t } = useTranslation();\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  return (\n    <>\n      <CustomField\n        type=\"email\"\n        name=\"email\"\n        placeholder={t('Email')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.email}\n        required\n        autoFocus={true}\n      />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <CustomField\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.password}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <CustomField\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder={t('Confirm_Password')}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.confirm}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"button\" onClick={props.next} disabled={props.isValid}>\n        {t('Next')}\n      </Button>\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { Error, Button } from 'pages/authFormStyle.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { useTranslation } from 'react-i18next';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport css from './PhoneInput.css';\n\n// import { useEffect } from 'react';\n// import { useFetchingData } from 'hooks';\n\nconst StepTwo = props => {\n  const { t } = useTranslation();\n\n  // const query = 'Dnipro';\n  // const query = props.values.city;\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n\n  // useEffect(() => {\n  //   const inputValue = value || '';\n  //   if (inputValue) {\n  //     console.log(inputValue);\n  //   }\n  // });\n  // console.log(props.values.city);\n  return (\n    <>\n      <CustomField\n        type=\"text\"\n        name=\"name\"\n        placeholder={t('Name')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.name}\n        required\n      />\n      <Error name=\"name\" component=\"div\" />\n      <CustomField\n        type=\"text\"\n        name=\"city\"\n        placeholder={t('City_region')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.city}\n        required\n      />\n      <Error name=\"city\" component=\"div\" />\n      {/* <CustomField\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Mobile phone\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.phone}\n        required\n      /> */}\n      <PhoneInput\n        name=\"phone\"\n        type=\"tel\"\n        className={css}\n        onlyCountries={['ua']}\n        country={'ua'}\n        countryCodeEditable={false}\n        // defaultCountry={'ua'}\n        errors={props.errors}\n        value={props.values.phone}\n        touched={props.touched}\n        onChange={phone => {\n          console.log('phone', `+${phone}`);\n\n          props.setFieldValue('phone', `+${phone}`);\n        }}\n        onBlur={e => {\n          if (e.currentTarget.value.length !== 19) {\n            e.currentTarget.style.border = '1px solid #E2001A';\n          } else {\n            e.currentTarget.style.border = '1px solid #3CBC81';\n          }\n        }}\n        onFocus={e => {\n          if (e.currentTarget.value.length !== 19) {\n            e.currentTarget.style.border = '1px solid #E2001A';\n          } else {\n            e.currentTarget.style.border = '1px solid #3CBC81';\n          }\n        }}\n        // isValid={(value, country) => {\n        //   if (value.match(/^\\380\\d{9}$/)) {\n        //     return 'Invalid value: ' + value + ', ' + country.name;\n        //   }\n        // } else if (value.match(/1234/)) {\n        //   return false;\n        // } else {\n        //   return true;\n        // }\n        // }}\n      />\n      <Error name=\"phone\" component=\"div\" />\n\n      <Button type=\"submit\">{t('Register')}</Button>\n      <Button type=\"button\" onClick={props.back}>\n        {t('Back')}\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport i18n from 'i18n';\nimport toast from 'react-hot-toast';\n\n// import { useFetchingData } from 'hooks';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  registerValidationSchemaOne,\n  registerValidationSchemaTwo,\n} from 'helpers/validationSchemas/RegisterValidationSchema';\n\n// import registerValidationSchema from 'helpers/validationSchemas/RegisterValidationSchema';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n\n  //////////// CITIES LOGIC\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n  ///////////\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    // console.log('phone', phone);\n    // if (!phone) {\n    //   toast.error('Please enter your phone');\n    // }\n    if (phone.length !== 13) {\n      toast.error(i18n.t('Enter_phone'));\n      return;\n    }\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      const resultLogIn = await dispatch(logIn({ email, password }));\n      console.log('resultLogIn', resultLogIn);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={\n                currentStep === 0\n                  ? registerValidationSchemaOne\n                  : registerValidationSchemaTwo\n              }\n            >\n              {({ errors, touched, isValid, setFieldValue, values }) => (\n                <FormCustom autoComplete=\"off\">\n                  {currentStep === 0 && (\n                    <StepOne\n                      next={handleNextStep}\n                      errors={errors}\n                      touched={touched}\n                      isValid={!isValid}\n                      values={values}\n                    />\n                  )}\n                  {currentStep === 1 && (\n                    <StepTwo\n                      back={handlePrevStep}\n                      errors={errors}\n                      touched={touched}\n                      values={values}\n                      setFieldValue={setFieldValue}\n                    />\n                  )}\n                </FormCustom>\n              )}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerValidationSchemaOne","Yup","shape","email","matches","i18n","min","required","password","max","confirm","oneOf","registerValidationSchemaTwo","name","city","props","useState","passwordVisibility","setPasswordVisibility","confirmVisibility","setConfirmVisibility","t","useTranslation","type","placeholder","errors","touched","values","autoFocus","component","id","onClick","next","disabled","isValid","href","src","GooglePic","alt","className","css","onlyCountries","country","countryCodeEditable","value","phone","onChange","console","log","setFieldValue","onBlur","e","currentTarget","length","style","border","onFocus","back","initialValues","currentStep","setCarrentStep","dispatch","useDispatch","handleNextStep","handlePrevStep","handleSubmit","resetForm","toast","signup","logIn","resultLogIn","Box","as","onSubmit","validationSchema","autoComplete","link","question","pageName"],"sourceRoot":""}