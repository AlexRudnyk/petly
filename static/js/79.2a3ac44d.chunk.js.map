{"version":3,"file":"static/js/79.2a3ac44d.chunk.js","mappings":"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","sources":["helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const registerValidationSchemaOne = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      // /^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1})))@([-A-Za-z]{1,}.){1,2}[-A-Za-z]{2,})$/,\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Error! Email must be in a format: aaaaa@aaa.aaa'\n    )\n    .min(12, 'At least 12 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Required field'),\n  password: Yup.string()\n    .matches(/^\\S+$/, 'Space is not allowed')\n    .min(7, 'At least 7 symbols')\n    .max(32, 'Maximum 32 symbols')\n    .required('Required field'),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required field'),\n});\n\nexport const registerValidationSchemaTwo = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      'Only cyrillic and latin letters are allowed'\n    )\n    .required('Required field'),\n\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should be \"City, Region\" separated by comma, only letters can be accepted'\n    )\n    .required('Required field '),\n  phone: Yup.string()\n\n    .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n    .min(13)\n    .max(13)\n    .required('Required field'),\n});\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const { t } = useTranslation();\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  console.log(props.isValid);\n  return (\n    <>\n      fix/register\n      <CustomField\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        errors={props.errors}\n        touched={props.touched}\n        required\n      />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <CustomField\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n          errors={props.errors}\n          touched={props.touched}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <CustomField\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder=\"Confirm Password\"\n          errors={props.errors}\n          touched={props.touched}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"submit\" onClick={props.next} disabled={props.isValid}>\n        Next\n      </Button>\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","import { Error, Button } from 'pages/authFormStyle.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\n\n// import { useEffect } from 'react';\n\nconst StepTwo = props => {\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n\n  // useEffect(() => {\n  //   const inputValue = value || '';\n  //   if (inputValue) {\n  //     console.log(inputValue);\n  //   }\n  // });\n\n  return (\n    <>\n      <CustomField\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        errors={props.errors}\n        touched={props.touched}\n        required\n      />\n      <Error name=\"name\" component=\"div\" />\n      <CustomField\n        type=\"text\"\n        name=\"city\"\n        placeholder=\"City, region\"\n        errors={props.errors}\n        touched={props.touched}\n        required\n      />\n      <Error name=\"city\" component=\"div\" />\n      {/* <CustomField\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Mobile phone\"\n        errors={props.errors}\n        touched={props.touched}\n        required\n      /> */}\n      <PhoneInput\n        name=\"phone\"\n        onlyCountries={['ua']}\n        country={'ua'}\n        // defaultCountry={'ua'}\n        value={props.values.phone}\n        onChange={phone => {\n          console.log('phone', `+${phone}`);\n          console.log('phone', typeof phone);\n          props.setFieldValue('phone', `+${phone}`);\n        }}\n      />\n\n      <Error name=\"phone\" component=\"div\" />\n      <Button type=\"submit\">Register</Button>\n      <Button type=\"button\" onClick={props.back}>\n        Back\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\n\n// import { useFetchingData } from 'hooks';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  registerValidationSchemaOne,\n  registerValidationSchemaTwo,\n} from 'helpers/validationSchemas/RegisterValidationSchema';\n\n// import registerValidationSchema from 'helpers/validationSchemas/RegisterValidationSchema';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n\n  //////////// CITIES LOGIC\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n  ///////////\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      console.log('resultSignup', resultSignup);\n      const resultLogIn = await dispatch(logIn({ email, password }));\n      console.log('resultLogIn', resultLogIn);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={\n                currentStep === 0\n                  ? registerValidationSchemaOne\n                  : registerValidationSchemaTwo\n              }\n            >\n              {({ errors, touched, isValid, setFieldValue, values }) => (\n                <FormCustom autoComplete=\"off\">\n                  {currentStep === 0 && (\n                    <StepOne\n                      next={handleNextStep}\n                      errors={errors}\n                      touched={touched}\n                      isValid={!isValid}\n                    />\n                  )}\n                  {currentStep === 1 && (\n                    <StepTwo\n                      back={handlePrevStep}\n                      errors={errors}\n                      touched={touched}\n                      values={values.phone}\n                      setFieldValue={setFieldValue}\n                    />\n                  )}\n                </FormCustom>\n              )}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerValidationSchemaOne","Yup","shape","email","matches","min","max","required","password","confirm","oneOf","registerValidationSchemaTwo","name","city","phone","props","useState","passwordVisibility","setPasswordVisibility","confirmVisibility","setConfirmVisibility","t","useTranslation","console","log","isValid","type","placeholder","errors","touched","component","id","onClick","next","disabled","href","src","GooglePic","alt","onlyCountries","country","value","values","onChange","setFieldValue","back","initialValues","currentStep","setCarrentStep","dispatch","useDispatch","handleNextStep","handlePrevStep","handleSubmit","resetForm","signup","resultSignup","logIn","resultLogIn","Box","as","onSubmit","validationSchema","autoComplete","link","question","pageName"],"sourceRoot":""}