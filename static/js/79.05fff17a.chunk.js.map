{"version":3,"file":"static/js/79.05fff17a.chunk.js","mappings":"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","sources":["helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst registerValidationSchema = Yup.object({\n  email: Yup.string()\n    .matches(\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Error! Email must be in a format: aaaaa@aaa.aaa'\n    )\n    .min(12, 'At least 12 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Required field'),\n  password: Yup.string()\n    .matches(/^\\S+$/, 'Space is not allowed')\n    .min(7, 'At least 7 symbols')\n    .max(32, 'Maximum 32 symbols')\n    .required('Required field'),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required field'),\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ\\s]*[a-zA-Zа-яА-ЯіІїЇґҐ][a-zA-Zа-яА-ЯіІїЇґҐ\\s]*$/,\n      'Only cyrillic and latin letters are allowed'\n    )\n    .required('Required field'),\n  city: Yup.string().required('Required field (City, region)'),\n  phone: Yup.string()\n    .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n    .min(13)\n    .max(13)\n    .required('Required field'),\n});\n\nexport default registerValidationSchema;\n","import { useState } from 'react';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\n\nimport { Error, Input, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  return (\n    <>\n      <Input type=\"email\" name=\"email\" placeholder=\"Email\" />\n      <Error name=\"email\" component=\"div\" />\n\n      <Div>\n        <Input\n          // type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          type={passwordVisibility ? 'text' : 'password'}\n        ></Input>\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n\n      <Input\n        // type=\"password\"\n        type={passwordVisibility ? 'text' : 'password'}\n        name=\"confirm\"\n        placeholder=\"Confirm Password\"\n      />\n      <Error name=\"confirm\" component=\"div\" />\n\n      <Button type=\"button\" onClick={props.next} disabled={false}>\n        Next\n      </Button>\n\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        Signup with Google\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","import { Error, Input, Button } from 'pages/authFormStyle.styled';\n\nconst StepTwo = props => {\n  return (\n    <>\n      <Input type=\"text\" name=\"name\" placeholder=\"Name\" />\n      <Error name=\"name\" component=\"div\" />\n\n      <Input type=\"text\" name=\"city\" placeholder=\"City, region\" />\n      <Error name=\"city\" component=\"div\" />\n\n      <Input type=\"tel\" name=\"phone\" placeholder=\"Mobile phone\" />\n      <Error name=\"phone\" component=\"div\" />\n\n      <Button type=\"submit\">Register</Button>\n      <Button type=\"button\" onClick={props.back}>\n        Back\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n// import { useFetchingData } from 'hooks';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport registerValidationSchema from 'helpers/validationSchemas/RegisterValidationSchema';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n\n  //////////// CITIES LOGIC\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n  ///////////\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(prev => prev + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(prev => prev - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      console.log('resultSignup', resultSignup);\n      const resultLogIn = await dispatch(logIn({ email, password }));\n      console.log('resultLogIn', resultLogIn);\n    }\n\n    resetForm();\n  };\n\n  const steps = [\n    <StepOne next={handleNextStep} />,\n    <StepTwo back={handlePrevStep} />,\n  ];\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>Registration</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={registerValidationSchema}\n              autoComplete=\"off\"\n            >\n              <FormCustom autoComplete=\"off\">{steps[currentStep]}</FormCustom>\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question=\"Already have an account??\"\n              pageName=\"login\"\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Yup","email","matches","min","max","required","password","confirm","oneOf","name","city","phone","props","useState","passwordVisibility","setPasswordVisibility","type","placeholder","component","id","onClick","next","disabled","href","src","GooglePic","alt","back","initialValues","currentStep","setCarrentStep","dispatch","useDispatch","handleSubmit","resetForm","signup","resultSignup","console","log","logIn","resultLogIn","steps","prev","Box","as","onSubmit","validationSchema","registerValidationSchema","autoComplete","link","question","pageName"],"sourceRoot":""}