{"version":3,"file":"static/js/91.b93ec766.chunk.js","mappings":"uTAEaA,EAA8BC,EAAAA,KAAaC,MAAM,CAC5DC,MAAOF,EAAAA,KACJG,QAEC,uEACA,mDAEDC,IAAI,GAAI,uBACRC,IAAI,GAAI,sBACRC,SAAS,kBACZC,SAAUP,EAAAA,KACPG,QAAQ,QAAS,wBACjBC,IAAI,EAAG,sBACPC,IAAI,GAAI,sBACRC,SAAS,kBACZE,QAASR,EAAAA,KACNS,MAAM,CAACT,EAAAA,GAAQ,YAAa,MAAO,wBACnCM,SAAS,oBAGDI,EAA8BV,EAAAA,KAAaC,MAAM,CAC5DU,KAAMX,EAAAA,KACHG,QACC,yJACA,+CAEDG,SAAS,kBAEZM,KAAMZ,EAAAA,KACHG,QACC,mPACA,6EAEDG,SAAS,qB,kDCoDd,EAvEuB,SAAAO,GACrB,OAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KACA,GAAkDF,EAAAA,EAAAA,WAAS,GAA3D,eAAOG,EAAP,KAA0BC,EAA1B,KAEQC,GAAMC,EAAAA,EAAAA,MAAND,EAYR,OAFAE,QAAQC,IAAIT,EAAMU,UAGhB,iCACE,SAAC,KAAD,CACEC,KAAK,QACLb,KAAK,QACLc,YAAY,QACZC,OAAQb,EAAMa,OACdC,QAASd,EAAMc,QACfC,OAAQf,EAAMe,OAAO1B,MACrBI,UAAQ,EACRuB,WAAW,KAEb,SAAC,KAAD,CAAOlB,KAAK,QAAQmB,UAAU,SAC9B,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,GAAG,WACHpB,KAAK,WACLc,YAAaN,EAAE,YACfK,KAAMT,EAAqB,OAAS,WACpCW,OAAQb,EAAMa,OACdC,QAASd,EAAMc,QACfC,OAAQf,EAAMe,OAAOrB,SACrBD,UAAQ,KAEV,SAAC,KAAD,CAAWkB,KAAK,SAASQ,QAlCJ,WACzBhB,GAAuBD,EACxB,EAgCK,SACGA,GAAqB,SAAC,KAAD,KAAkB,SAAC,KAAD,OAE1C,SAAC,KAAD,CAAOJ,KAAK,WAAWmB,UAAU,YAEnC,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,GAAG,UACHP,KAAMP,EAAoB,OAAS,WACnCN,KAAK,UACLc,YAAY,mBACZC,OAAQb,EAAMa,OACdC,QAASd,EAAMc,QACfC,OAAQf,EAAMe,OAAOpB,QACrBF,UAAQ,KAEV,SAAC,KAAD,CAAWkB,KAAK,SAASQ,QA9CJ,WACzBd,GAAsBD,EACvB,EA4CK,SACGA,GAAoB,SAAC,KAAD,KAAkB,SAAC,KAAD,OAEzC,SAAC,KAAD,CAAON,KAAK,UAAUmB,UAAU,YAElC,SAAC,KAAD,CAAQN,KAAK,SAASQ,QAASnB,EAAMoB,KAAMC,SAAUrB,EAAMU,QAA3D,mBAGA,UAAC,KAAD,CAAmBY,KAAK,mDAAxB,WACE,SAAC,KAAD,CAAWC,IAAKC,EAAAA,EAAWC,IAAI,WAC9BnB,EAAE,2BAIV,E,mBCrFD,G,QAAA,CAAiB,GC4GjB,EApGgB,SAAAN,GAmBd,OACE,iCACE,SAAC,KAAD,CACEW,KAAK,OACLb,KAAK,OACLc,YAAY,OACZC,OAAQb,EAAMa,OACdC,QAASd,EAAMc,QACfC,OAAQf,EAAMe,OAAOjB,KACrBL,UAAQ,KAEV,SAAC,KAAD,CAAOK,KAAK,OAAOmB,UAAU,SAC7B,SAAC,KAAD,CACEN,KAAK,OACLb,KAAK,OACLc,YAAY,eACZC,OAAQb,EAAMa,OACdC,QAASd,EAAMc,QACfC,OAAQf,EAAMe,OAAOhB,KACrBN,UAAQ,KAEV,SAAC,KAAD,CAAOK,KAAK,OAAOmB,UAAU,SAU7B,SAAC,IAAD,CACEnB,KAAK,QACLa,KAAK,MACLe,UAAWC,EACXC,cAAe,CAAC,MAChBC,QAAS,KACTC,qBAAqB,EAErBjB,OAAQb,EAAMa,OACdkB,MAAO/B,EAAMe,OAAOiB,MACpBlB,QAASd,EAAMc,QACfmB,SAAU,SAAAD,GACRxB,QAAQC,IAAI,QAAZ,WAAyBuB,IAEzBhC,EAAMkC,cAAc,QAApB,WAAiCF,GAClC,EACDG,OAAQ,SAAAC,GAC+B,KAAjCA,EAAEC,cAAcN,MAAMO,OACxBF,EAAEC,cAAcE,MAAMC,OAAS,oBAE/BJ,EAAEC,cAAcE,MAAMC,OAAS,mBAElC,EACDC,QAAS,SAAAL,GAC8B,KAAjCA,EAAEC,cAAcN,MAAMO,OACxBF,EAAEC,cAAcE,MAAMC,OAAS,oBAE/BJ,EAAEC,cAAcE,MAAMC,OAAS,mBAElC,KAYH,SAAC,KAAD,CAAO1C,KAAK,QAAQmB,UAAU,SAE9B,SAAC,KAAD,CAAQN,KAAK,SAAb,uBACA,SAAC,KAAD,CAAQA,KAAK,SAASQ,QAASnB,EAAM0C,KAArC,oBAKL,E,UC9EKC,EAAgB,CACpBtD,MAAO,GACPK,SAAU,GACVC,QAAS,GACTG,KAAM,GACNC,KAAM,GACNiC,MAAO,IA2GT,EAxG4B,WAC1B,OAAsC/B,EAAAA,EAAAA,UAAS,GAA/C,eAAO2C,EAAP,KAAoBC,EAApB,KACQvC,GAAMC,EAAAA,EAAAA,MAAND,EAcFwC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiB,WACrBH,EAAeD,EAAc,EAC9B,EAEKK,EAAiB,WACrBJ,EAAeD,EAAc,EAC9B,EAEKM,EAAY,mCAAG,wGACjB7D,EADiB,EACjBA,MAAOK,EADU,EACVA,SAAUI,EADA,EACAA,KAAMC,EADN,EACMA,KAAMiC,EADZ,EACYA,MAC7BmB,EAFiB,EAEjBA,UAMmB,KAAjBnB,EAAMM,OARS,uBASjB9B,QAAQC,IAAI,WACZ2C,EAAAA,GAAAA,MAAY,2BAVK,0CAaQN,GACzBO,EAAAA,EAAAA,IAAO,CAAEhE,MAAAA,EAAOK,SAAAA,EAAUI,KAAAA,EAAMC,KAAAA,EAAMiC,MAAAA,KAdrB,UAiBO,2BAJpBsB,EAba,QAiBF3C,KAjBE,wBAkBjBH,QAAQC,IAAI,eAAgB6C,GAlBX,UAmBSR,GAASS,EAAAA,EAAAA,IAAM,CAAElE,MAAAA,EAAOK,SAAAA,KAnBjC,QAmBX8D,EAnBW,OAoBjBhD,QAAQC,IAAI,cAAe+C,GApBV,QAuBnBL,IAvBmB,4CAAH,wDA0BlB,OACE,SAACM,EAAA,EAAD,CAAKC,GAAG,UAAR,UACE,SAAC,KAAD,WACE,SAAC,IAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAYpD,EAAE,mBAEd,SAAC,KAAD,CACEqC,cAAeA,EACfgB,SAAUT,EACVU,iBACkB,IAAhBhB,EACI1D,EACAW,EANR,SASG,gBAAGgB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASJ,EAApB,EAAoBA,QAASwB,EAA7B,EAA6BA,cAAenB,EAA5C,EAA4CA,OAA5C,OACC,UAAC,KAAD,CAAY8C,aAAa,MAAzB,UACmB,IAAhBjB,IACC,SAAC,EAAD,CACExB,KAAM4B,EACNnC,OAAQA,EACRC,QAASA,EACTJ,SAAUA,EACVK,OAAQA,IAGK,IAAhB6B,IACC,SAAC,EAAD,CACEF,KAAMO,EACNpC,OAAQA,EACRC,QAASA,EACTC,OAAQA,EACRmB,cAAeA,MAjBtB,KAwBH,SAAC,IAAD,CACE4B,KAAK,SACLC,SAAUzD,EAAE,cACZ0D,SAAU1D,EAAE,oBAOzB,C","sources":["helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","webpack://react-homework-template/./src/pages/RegisterPage/PhoneInput.css?0cb8","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const registerValidationSchemaOne = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      // /^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1})))@([-A-Za-z]{1,}.){1,2}[-A-Za-z]{2,})$/,\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Error! Email must be in a format: aaaaa@aaa.aaa'\n    )\n    .min(12, 'At least 12 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Required field'),\n  password: Yup.string()\n    .matches(/^\\S+$/, 'Space is not allowed')\n    .min(7, 'At least 7 symbols')\n    .max(32, 'Maximum 32 symbols')\n    .required('Required field'),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required field'),\n});\n\nexport const registerValidationSchemaTwo = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      'Only cyrillic and latin letters are allowed'\n    )\n    .required('Required field'),\n\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should be \"City, Region\" separated by comma, only letters can be accepted'\n    )\n    .required('Required field '),\n  // phone: Yup.string()\n\n  //   .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n  //   .min(13)\n  //   .max(13)\n  //   .required('Required field'),\n});\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const { t } = useTranslation();\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  console.log(props.isValid);\n\n  return (\n    <>\n      <CustomField\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.email}\n        required\n        autoFocus={true}\n      />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <CustomField\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.password}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <CustomField\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder=\"Confirm Password\"\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.confirm}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"button\" onClick={props.next} disabled={props.isValid}>\n        Next\n      </Button>\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { Error, Button } from 'pages/authFormStyle.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport css from './PhoneInput.css';\n\n// import { useEffect } from 'react';\n// import { useFetchingData } from 'hooks';\n\nconst StepTwo = props => {\n  // const query = 'Dnipro';\n  // const query = props.values.city;\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n\n  // useEffect(() => {\n  //   const inputValue = value || '';\n  //   if (inputValue) {\n  //     console.log(inputValue);\n  //   }\n  // });\n  // console.log(props.values.city);\n  return (\n    <>\n      <CustomField\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.name}\n        required\n      />\n      <Error name=\"name\" component=\"div\" />\n      <CustomField\n        type=\"text\"\n        name=\"city\"\n        placeholder=\"City, region\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.city}\n        required\n      />\n      <Error name=\"city\" component=\"div\" />\n      {/* <CustomField\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Mobile phone\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.phone}\n        required\n      /> */}\n      <PhoneInput\n        name=\"phone\"\n        type=\"tel\"\n        className={css}\n        onlyCountries={['ua']}\n        country={'ua'}\n        countryCodeEditable={false}\n        // defaultCountry={'ua'}\n        errors={props.errors}\n        value={props.values.phone}\n        touched={props.touched}\n        onChange={phone => {\n          console.log('phone', `+${phone}`);\n\n          props.setFieldValue('phone', `+${phone}`);\n        }}\n        onBlur={e => {\n          if (e.currentTarget.value.length !== 19) {\n            e.currentTarget.style.border = '1px solid #E2001A';\n          } else {\n            e.currentTarget.style.border = '1px solid #3CBC81';\n          }\n        }}\n        onFocus={e => {\n          if (e.currentTarget.value.length !== 19) {\n            e.currentTarget.style.border = '1px solid #E2001A';\n          } else {\n            e.currentTarget.style.border = '1px solid #3CBC81';\n          }\n        }}\n        // isValid={(value, country) => {\n        //   if (value.match(/^\\380\\d{9}$/)) {\n        //     return 'Invalid value: ' + value + ', ' + country.name;\n        //   }\n        // } else if (value.match(/1234/)) {\n        //   return false;\n        // } else {\n        //   return true;\n        // }\n        // }}\n      />\n      <Error name=\"phone\" component=\"div\" />\n\n      <Button type=\"submit\">Register</Button>\n      <Button type=\"button\" onClick={props.back}>\n        Back\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport toast from 'react-hot-toast';\n\n// import { useFetchingData } from 'hooks';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  registerValidationSchemaOne,\n  registerValidationSchemaTwo,\n} from 'helpers/validationSchemas/RegisterValidationSchema';\n\n// import registerValidationSchema from 'helpers/validationSchemas/RegisterValidationSchema';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n\n  //////////// CITIES LOGIC\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n  ///////////\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    // console.log('phone', phone);\n    // if (!phone) {\n    //   toast.error('Please enter your phone');\n    // }\n    if (phone.length !== 13) {\n      console.log('INVALID');\n      toast.error('Please enter your phone');\n      return;\n    }\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      console.log('resultSignup', resultSignup);\n      const resultLogIn = await dispatch(logIn({ email, password }));\n      console.log('resultLogIn', resultLogIn);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={\n                currentStep === 0\n                  ? registerValidationSchemaOne\n                  : registerValidationSchemaTwo\n              }\n            >\n              {({ errors, touched, isValid, setFieldValue, values }) => (\n                <FormCustom autoComplete=\"off\">\n                  {currentStep === 0 && (\n                    <StepOne\n                      next={handleNextStep}\n                      errors={errors}\n                      touched={touched}\n                      isValid={!isValid}\n                      values={values}\n                    />\n                  )}\n                  {currentStep === 1 && (\n                    <StepTwo\n                      back={handlePrevStep}\n                      errors={errors}\n                      touched={touched}\n                      values={values}\n                      setFieldValue={setFieldValue}\n                    />\n                  )}\n                </FormCustom>\n              )}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerValidationSchemaOne","Yup","shape","email","matches","min","max","required","password","confirm","oneOf","registerValidationSchemaTwo","name","city","props","useState","passwordVisibility","setPasswordVisibility","confirmVisibility","setConfirmVisibility","t","useTranslation","console","log","isValid","type","placeholder","errors","touched","values","autoFocus","component","id","onClick","next","disabled","href","src","GooglePic","alt","className","css","onlyCountries","country","countryCodeEditable","value","phone","onChange","setFieldValue","onBlur","e","currentTarget","length","style","border","onFocus","back","initialValues","currentStep","setCarrentStep","dispatch","useDispatch","handleNextStep","handlePrevStep","handleSubmit","resetForm","toast","signup","resultSignup","logIn","resultLogIn","Box","as","onSubmit","validationSchema","autoComplete","link","question","pageName"],"sourceRoot":""}