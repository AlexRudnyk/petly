{"version":3,"file":"static/js/79.6dc5d050.chunk.js","mappings":"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","sources":["helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const registerValidationSchemaOne = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Error! Email must be in a format: aaaaa@aaa.aaa'\n    )\n    .min(12, 'At least 12 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Required field'),\n  password: Yup.string()\n    .matches(/^\\S+$/, 'Space is not allowed')\n    .min(7, 'At least 7 symbols')\n    .max(32, 'Maximum 32 symbols')\n    .required('Required field'),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required field'),\n});\n\nexport const registerValidationSchemaTwo = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      'Only cyrillic and latin letters are allowed'\n    )\n    .required('Required field'),\n\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should be \"City, Region\" separated by comma, only letters can be accepted'\n    )\n    .required('Required field '),\n  phone: Yup.string()\n\n    .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n    .min(13)\n    .max(13)\n    .required('Required field'),\n});\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\n\nimport { Error, Input, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = ({ next, isSubmitting }) => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const { t } = useTranslation();\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  return (\n    <>\n      <Input type=\"email\" name=\"email\" placeholder={t('Email')} />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <Input\n          // type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n        ></Input>\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <Input\n          // type=\"password\"\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder={t('Confirm_Password')}\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"submit\" onClick={next} disabled={isSubmitting}>\n        {t('Next')}\n      </Button>\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","import { Error, Input, Button } from 'pages/authFormStyle.styled';\nimport { useTranslation } from 'react-i18next';\n\nconst StepTwo = ({ props }) => {\n  const { t } = useTranslation();\n\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n\n  // useEffect(() => {\n  //   const inputValue = value || '';\n  //   if (inputValue) {\n  //     console.log(inputValue);\n  //   }\n  // });\n\n  return (\n    <>\n      <Input type=\"text\" name=\"name\" placeholder={t('Name')} />\n      <Error name=\"name\" component=\"div\" />\n\n      <Input type=\"text\" name=\"city\" placeholder={t('City_region')} />\n      <Error name=\"city\" component=\"div\" />\n\n      <Input type=\"tel\" name=\"phone\" placeholder={t('Mobile_phone')} />\n      <Error name=\"phone\" component=\"div\" />\n\n      <Button type=\"submit\">{t('Register')}</Button>\n      <Button type=\"button\" onClick={props.back}>\n        {t('Back')}\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\n\n// import { useFetchingData } from 'hooks';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  registerValidationSchemaOne,\n  registerValidationSchemaTwo,\n} from 'helpers/validationSchemas/RegisterValidationSchema';\n\n// import registerValidationSchema from 'helpers/validationSchemas/RegisterValidationSchema';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n\n  //////////// CITIES LOGIC\n  // const query = 'Dnipro';\n  // const { status, results } = useFetchingData('api/cities', query);\n\n  // const array = results.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n  //   return Number(useCounty)\n  //     ? `${cityEn}, ${countyEn}, ${stateEn} region`\n  //     : `${cityEn}, ${stateEn} region`;\n  // });\n  // console.log('array', array);\n  ///////////\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = async () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    {\n      // setSubmitting,\n      resetForm,\n    }\n  ) => {\n    // setSubmitting(false);\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      console.log('resultSignup', resultSignup);\n      const resultLogIn = await dispatch(logIn({ email, password }));\n      console.log('resultLogIn', resultLogIn);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              validationSchema={\n                currentStep === 0\n                  ? registerValidationSchemaOne\n                  : registerValidationSchemaTwo\n              }\n              onSubmit={handleSubmit}\n              // autoComplete=\"off\"\n              // validate={values => {\n              //   console.log(values.email);\n              //   if (values.password === values.confirm) {\n              //     console.log('OK');\n              //   }\n              // }}\n            >\n              {/* {({ isSubmitting, values, setFieldValue }) => {\n                return ( */}\n              <FormCustom autoComplete=\"off\">\n                {currentStep === 0 && (\n                  <StepOne\n                    next={handleNextStep}\n                    // isSubmitting={isSubmitting}\n                  />\n                )}\n                {currentStep === 1 && (\n                  <StepTwo\n                    back={handlePrevStep}\n                    // value={values.city}\n                    // setFieldValue={setFieldValue}\n                  />\n                )}\n              </FormCustom>\n              {/* );\n              }} */}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerValidationSchemaOne","Yup","shape","email","matches","min","max","required","password","confirm","oneOf","registerValidationSchemaTwo","name","city","phone","next","isSubmitting","useState","passwordVisibility","setPasswordVisibility","t","useTranslation","confirmVisibility","setConfirmVisibility","type","placeholder","component","id","onClick","disabled","href","src","GooglePic","alt","props","back","initialValues","currentStep","setCarrentStep","dispatch","useDispatch","handleNextStep","handleSubmit","resetForm","signup","resultSignup","console","log","logIn","resultLogIn","Box","as","validationSchema","onSubmit","autoComplete","link","question","pageName"],"sourceRoot":""}