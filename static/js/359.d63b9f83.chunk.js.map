{"version":3,"file":"static/js/359.d63b9f83.chunk.js","mappings":"sNAuBA,EArBeA,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,IAAI,GAAI,uBACRC,IAAI,GAAI,sBACRC,QACC,uEACA,iBAEDC,SAAS,6BACZC,SAAUP,EAAAA,KAEPG,IAAI,EAAG,sBACPC,IAAI,GAAI,sBACRC,QACC,QACA,+DAEDC,SAAS,kC,6GC4Ed,EAnEyB,WACvB,OAA0CE,EAAAA,EAAAA,WAAS,GAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,SAACC,EAAA,EAAD,CAAKC,GAAG,UAAR,UACE,SAAC,KAAD,WACE,SAAC,IAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,qBACA,SAAC,KAAD,CACEC,cAAe,CAAEb,MAAO,GAAIK,SAAU,IACtCS,SAjBS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAI,gGAAsBH,GAClCN,GAASU,EAAAA,EAAAA,IAAMJ,IACfC,GACD,EAcWI,iBAAkBC,EAHpB,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,YAAY,QACZpB,UAAQ,EACRqB,aAAa,SAEf,SAAC,KAAD,CAAOF,KAAK,QAAQG,UAAU,SAC9B,UAAC,KAAD,YACE,SAAC,KAAD,CACEJ,KAAMf,EAAgB,OAAS,WAC/BgB,KAAK,WACLC,YAAY,WACZC,aAAa,MACbrB,UAAQ,KAGV,SAAC,KAAD,CAAWuB,QAjCJ,WACrBnB,GAAkBD,EACnB,EA+Be,SACGA,GAAgB,SAAC,KAAD,KAAkB,SAAC,KAAD,OAErC,SAAC,KAAD,CAAOgB,KAAK,WAAWG,UAAU,YAEnC,SAAC,KAAD,CAAQJ,KAAK,SAAb,oBACA,UAAC,IAAD,CAAmBM,KAAK,mDAAxB,WACE,SAAC,IAAD,CAAWC,IAAKC,EAAAA,EAAWC,IAAI,WADjC,6BAMJ,SAAC,IAAD,CACEC,KAAK,YACLC,SAAS,yBACTC,SAAS,qBAQtB,C","sources":["helpers/validationSchemas/loginSchema.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(12, 'At least 12 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .matches(\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Invalid email'\n    )\n    .required('Email is a required field'),\n  password: yup\n    .string()\n    .min(7, 'At least 7 symbols')\n    .max(32, 'Maximum 32 symbols')\n    .matches(\n      /^\\S+$/,\n      'Password can contain any letters and symbols without spaces'\n    )\n    .required('Password is a required field'),\n});\n\nexport default schema;\n","import { Formik } from 'formik';\nimport schema from 'helpers/validationSchemas/loginSchema';\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations.js';\nimport RouteFormLoginRegister from '../routeFormLoginRegister.jsx';\nimport GooglePic from '../../images/svg/google-color-svgrepo-com.svg';\nimport { useState } from 'react';\n// import CustomField from '../authFormStyle.styled';\nimport {\n  TitleAuth,\n  FormCustom,\n  Button,\n  Input,\n  Error,\n  BoxAuth,\n  LogoBg,\n  // Icon,\n} from '../authFormStyle.styled';\n\nimport { GoogleLoginButton, GoogleImg } from './LoginPage.styled.jsx';\nimport {\n  ButtonImg,\n  ClosedEyaIcon,\n  Div,\n  OpenEyaIcon,\n} from 'pages/RegisterPage/RegisterPage.styled.jsx';\n\nexport const LoginPage = () => {\n  const [passwordShown, setPasswordShown] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log('Привет я твой боди', values);\n    dispatch(logIn(values));\n    resetForm();\n  };\n  const togglePassword = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>Login</TitleAuth>\n            <Formik\n              initialValues={{ email: '', password: '' }}\n              onSubmit={handleSubmit}\n              validationSchema={schema}\n            >\n              <FormCustom>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  required\n                  autoComplete=\"off\"\n                />\n                <Error name=\"email\" component=\"div\" />\n                <Div>\n                  <Input\n                    type={passwordShown ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                    required\n                  />\n\n                  <ButtonImg onClick={togglePassword}>\n                    {passwordShown ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n                  </ButtonImg>\n                  <Error name=\"password\" component=\"div\" />\n                </Div>\n                <Button type=\"submit\">Login</Button>\n                <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n                  <GoogleImg src={GooglePic} alt=\"Google\" />\n                  Login with Google\n                </GoogleLoginButton>\n              </FormCustom>\n            </Formik>\n            <RouteFormLoginRegister\n              link=\"/register\"\n              question=\"Don't have an account?\"\n              pageName=\"Register\"\n            />\n            {/* <LoginButton type=\"submit\">Login</LoginButton> */}\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"names":["yup","shape","email","min","max","matches","required","password","useState","passwordShown","setPasswordShown","dispatch","useDispatch","Box","as","initialValues","onSubmit","values","resetForm","console","log","logIn","validationSchema","schema","type","name","placeholder","autoComplete","component","onClick","href","src","GooglePic","alt","link","question","pageName"],"sourceRoot":""}